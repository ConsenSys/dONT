//point doubling from https://eprint.iacr.org/2015/1060.pdf
ec_double : {fv} (Field fv, JacobianPoint fv) -> JacobianPoint fv
ec_double(f,s) =
  if is_zero(s.z) then
    { x = f.field_unit, y = f.field_unit, z = f.field_zero } /* 5: r <- (1,1,0) and return */
  else
    { x = r18, y = r15, z = r10 }
 where
   add = f.add
   sub = f.sub
   mul = f.mul
   is_zero(x) = f.is_equal(x, f.field_zero)

   r1  = f.sq(s.y)               /*  1: t0 <- Y * Y */
   r2  = add(r1,r1)              /*  2: Z3 <- t0 + t0*/
   r3  = add(r2, r2)            /*   3: Z3 <- Z3 + Z3 */
   r4 =  add(r3, r3)            /*   4: Z3 <- Z3 + Z3 */
   r5 =  mul(s.y,s.z)           /*   5: t1 <- Y * Z */
   r6 =  mul(s.z, s.z)           /*  6: t2 <- Z *  */
   r7 =  mul(r6,21)              /*  7: t2 <- b3 * t2 */
   r8 =  mul(r7,r4)              /*  8: X3 <- t2 * Z3 */
   r9 =  add(r1, r7)             /*  9: Y3 <- t0 + t2 */
   r10 = mul(r5,r4)               /* 10: Z3 <- t1 * Z3 */
   r11 = add(r7,r7)               /* 11: t1 <- t2 + t2 */
   r12 = add(r11,r7)             /*  12: t2 <- t1 + t2 */ 
   r13 = sub(r1,r12)             /*  13: t0 <- t0 - t2 */
   r14 = mul(r13,r9)             /*  14: Y3 <- t0 * Y3 */
   r15 = add(r8,r14)            /*   15: Y3 <- X3 + Y3 */
   r16 = mul(s.x, s.y)           /*  16: t1 <- X * Y */
   r17 = mul(r1, r16)           /*   17: X3 <- t0 * t1 */
   r18 = add(r17,r17)           /*   18: X3 <- X3 + X3 */
